#ifndef MY_LM_H
#define MY_LM_H

#include "ns3/oran-data-repository.h"
#include "ns3/oran-lm.h"
#include <ns3/vector.h>
#include "gradientDescent.hpp"
namespace ns3
{

class MyLm : public OranLm
{
  protected:
    /**
     * UE related information.
     */
    struct UeInfo
    {
        uint64_t nodeId; //!< The node ID.
        uint16_t cellId; //!< The cell ID.
        uint16_t rnti;   //!< The RNTI ID.
        double loss;     //!< The loss.
        uint64_t Rx;     //!< Recieved packet
        uint64_t Tx;     //!< Transport packet
        Vector position; //!< The physical position.
    };

    /**
     * eNB related information.
     */
    struct EnbInfo
    {
        uint64_t nodeId; //!< The node ID.
        uint16_t cellId; //!< The cell ID.
        Vector position; //!< The physical position.
    };

  public:
    /**
     * Gets the TypeId of the MyLm class.
     *
     * \return The TypeId.
     */
    static TypeId GetTypeId(void);
    /**
     * Constructor of the MyLm class.
     */
    MyLm(void);
    /**
     * Destructor of the MyLm class.
     */
    ~MyLm(void) override;
    /**
     * Runs the logic specific for this Logic Module. This will retrieve the
     * location of all LTE UEs and eNBs, find the closest eNB for each UE, and if
     * this eNB is not the serving eNB, a handover Command is generated.
     *
     * \return A vector with the handover commands generated by this Logic Module.
     */
    std::vector<Ptr<OranCommand>> Run(void) override;
    
  private:
     VanillaGradientDescent vgd;
     int runTime;
     double M;
     double totalloss;
     double throughputRun;
     double throughputTotal;
    /**
     * Method to get the UE information from the repository.
     *
     * \param data The data repository.
     *
     * \return A vector of UE Information structures.
     */
    std::vector<MyLm::UeInfo> GetUeInfos(
        Ptr<OranDataRepository> data) const;
    /**
     * Method to get the eNB information from the repository.
     *
     * \param data The data repository.
     *
     * \return A vector of eNB Information structures.
     */
    std::vector<MyLm::EnbInfo> GetEnbInfos(
        Ptr<OranDataRepository> data) const;
    /**
     * Method with the logic to get the distance between UEs and eNBs
     * and generate Handover Commands if needed.
     *
     * \param data The data repository.
     * \param ueInfos A vector with the UE information.
     * \param enbInfos A vector with the eNB information.
     *
     * \return A vector with the handover commands generated.
     */
    std::vector<Ptr<OranCommand>> GetHandoverCommands(
        Ptr<OranDataRepository> data,
        std::vector<MyLm::UeInfo> ueInfos,
        std::vector<MyLm::EnbInfo> enbInfos) const;
    double GetThroughput(std::vector<MyLm::UeInfo> ueInfos) const;
    double GetLoss(std::vector<MyLm::UeInfo> ueInfos) const;
};

} // namespace ns3

#endif
